function UPDRS = wjn_ppmi_read_updrs(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   UPDRS = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   UPDRS = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   UPDRS = importfile('UPDRS.csv', 2, 12790);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2018/09/14 15:36:15

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,3,5,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,47]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,3,5,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,47]);
rawCellColumns = raw(:, [2,4,6,7,8,45,46,48,49,50,51]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
UPDRS = table;
UPDRS.REC_ID = cell2mat(rawNumericColumns(:, 1));
UPDRS.F_STATUS = rawCellColumns(:, 1);
UPDRS.PATNO = cell2mat(rawNumericColumns(:, 2));
UPDRS.EVENT_ID = rawCellColumns(:, 2);
UPDRS.PAG_NAME = cell2mat(rawNumericColumns(:, 3));
UPDRS.INFODT = rawCellColumns(:, 3);
UPDRS.CMEDTM = rawCellColumns(:, 4);
UPDRS.EXAMTM = rawCellColumns(:, 5);
UPDRS.NP3SPCH = cell2mat(rawNumericColumns(:, 4));
UPDRS.NP3FACXP = cell2mat(rawNumericColumns(:, 5));
UPDRS.NP3RIGN = cell2mat(rawNumericColumns(:, 6));
UPDRS.NP3RIGRU = cell2mat(rawNumericColumns(:, 7));
UPDRS.NP3RIGLU = cell2mat(rawNumericColumns(:, 8));
UPDRS.PN3RIGRL = cell2mat(rawNumericColumns(:, 9));
UPDRS.NP3RIGLL = cell2mat(rawNumericColumns(:, 10));
UPDRS.NP3FTAPR = cell2mat(rawNumericColumns(:, 11));
UPDRS.NP3FTAPL = cell2mat(rawNumericColumns(:, 12));
UPDRS.NP3HMOVR = cell2mat(rawNumericColumns(:, 13));
UPDRS.NP3HMOVL = cell2mat(rawNumericColumns(:, 14));
UPDRS.NP3PRSPR = cell2mat(rawNumericColumns(:, 15));
UPDRS.NP3PRSPL = cell2mat(rawNumericColumns(:, 16));
UPDRS.NP3TTAPR = cell2mat(rawNumericColumns(:, 17));
UPDRS.NP3TTAPL = cell2mat(rawNumericColumns(:, 18));
UPDRS.NP3LGAGR = cell2mat(rawNumericColumns(:, 19));
UPDRS.NP3LGAGL = cell2mat(rawNumericColumns(:, 20));
UPDRS.NP3RISNG = cell2mat(rawNumericColumns(:, 21));
UPDRS.NP3GAIT = cell2mat(rawNumericColumns(:, 22));
UPDRS.NP3FRZGT = cell2mat(rawNumericColumns(:, 23));
UPDRS.NP3PSTBL = cell2mat(rawNumericColumns(:, 24));
UPDRS.NP3POSTR = cell2mat(rawNumericColumns(:, 25));
UPDRS.NP3BRADY = cell2mat(rawNumericColumns(:, 26));
UPDRS.NP3PTRMR = cell2mat(rawNumericColumns(:, 27));
UPDRS.NP3PTRML = cell2mat(rawNumericColumns(:, 28));
UPDRS.NP3KTRMR = cell2mat(rawNumericColumns(:, 29));
UPDRS.NP3KTRML = cell2mat(rawNumericColumns(:, 30));
UPDRS.NP3RTARU = cell2mat(rawNumericColumns(:, 31));
UPDRS.NP3RTALU = cell2mat(rawNumericColumns(:, 32));
UPDRS.NP3RTARL = cell2mat(rawNumericColumns(:, 33));
UPDRS.NP3RTALL = cell2mat(rawNumericColumns(:, 34));
UPDRS.NP3RTALJ = cell2mat(rawNumericColumns(:, 35));
UPDRS.NP3RTCON = cell2mat(rawNumericColumns(:, 36));
UPDRS.DYSKPRES = cell2mat(rawNumericColumns(:, 37));
UPDRS.DYSKIRAT = cell2mat(rawNumericColumns(:, 38));
UPDRS.NHY = cell2mat(rawNumericColumns(:, 39));
UPDRS.ANNUAL_TIME_BTW_DOSE_NUPDRS = rawCellColumns(:, 6);
UPDRS.ON_OFF_DOSE = rawCellColumns(:, 7);
UPDRS.PD_MED_USE = cell2mat(rawNumericColumns(:, 40));
UPDRS.ORIG_ENTRY = rawCellColumns(:, 8);
UPDRS.LAST_UPDATE = rawCellColumns(:, 9);
UPDRS.QUERY = rawCellColumns(:, 10);
UPDRS.SITE_APRV = rawCellColumns(:, 11);

