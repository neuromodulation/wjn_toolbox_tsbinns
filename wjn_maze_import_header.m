function header = wjn_maze_import_header(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   TRIAL120190109045705 = IMPORTFILE(FILENAME) Reads data from text file
%   FILENAME for the default selection.
%
%   TRIAL120190109045705 = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads
%   data from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   Trial120190109045705 = importfile('Trial1_20190109_04_57_05.txt', 1, 4096);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2019/01/09 05:47:35

%% Initialize variables.
delimiter = {'timestamp','<','>',',','/'};
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Format for each line of text:
%   column2: text (%q)
%	column3: text (%q)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*q%q%q%*s%*s%*s%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
header = table(dataArray{1:end-1}, 'VariableNames', {'name','def'});
if isempty(header)
    header = [];
    return
end
i = ci('coordinate-log',header.name);
header = header(3:i-1,:);
i=[];
for a = 1:size(header,1)
    if strcmp(header.name{a},'') || strcmp(header.name{a},'run-specific-data') || strcmp(header.name{a},'trial-specific-data')
        i = [i a];
    end
end

header(i,:) = [];
% keyboard
ni=[];nums=[];
for a = 1:size(header,1)
    [num, status] = str2num(header.def{a});
    if status==1 && ~strcmp(header.name{a},'date') 
        ni = [ni a];
        nums = [nums num];
    elseif strcmp(header.def{a},'yes')
        ni = [ni a];
        nums = [nums 1];
    elseif strcmp(header.def{a},'no')
        ni = [ni a];
        nums = [nums 0];
    end
end

X=header;
Xc = table2cell(header);
header = cell2table(Xc(:,2)','VariableNames',strrep(X.name,'-','_'));


for a = 1:length(ni)
    header.(header.Properties.VariableNames{ni(a)})=nums(a);
end



